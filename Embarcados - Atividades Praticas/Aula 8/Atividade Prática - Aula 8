Aluno: Douglas da Silveira Alves	Matrícula: 13/0024881
Data:04/04/17


		Atividade Prática - Aula 8

1. Crie um programa em C que cria uma thread, e faça com que o programa principal envie os valores 1, 2, 3, 4, 5, 6, 7, 8, 9 e 10 para a thread, com intervalos de 1 segundo entre cada envio. Depois de o programa principal enviar o número 10, ele aguarda 1 segundo e termina a execução. A thread escreve na tela cada valor recebido, e quando ela receber o valor 10, ela termina a execução.

--> Código:

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
//#include <iostream>

// Imprime um caractere em stderr
void* print_xs (void* c)
{
	int *charactere= (int *) c;
	int vetor[10];
	int i;
	for(i=0;i<10;i++){
	vetor[i]= *charactere;
	}

	printf("Será escrito:\n");
	for(i=0;i<10;i++){
	printf("%d\n", vetor[i]);
	sleep(11);
	}
	return NULL;
}
int main ()
{
	pthread_t thread_id1;
	
	int contagem[10];
	int i;

	for(i=0; i<10; i++){
	contagem[i]=(i+1);
	printf("Escrevendo os números: %d\n", contagem[i]);
	pthread_create (&thread_id1, NULL, &print_xs, &contagem[i]);	
	sleep(1);

	}
	


	return 0;
}


--> Comandos para executar programa:

gcc q1.c -o teste1 -lpthread
./teste1


2. Crie um programa em C que preenche o vetor 'long int v[50000]' completamente com valores aleatórios (use a função random()), e que procura o valor máximo do vetor por dois métodos:
	(a) Pela busca completa no vetor v[];
	(b) Separando o vetor em 4 partes, e usando 4 threads para cada uma encontrar o máximo de cada parte. Ao final das threads, o programa principal compara o resultado das quatro threads para definir o máximo do vetor.
Ao final do programa principal, compare os resultados obtidos pelos dois métodos.


Letra a:

-->Código:

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


volatile int v_max=0;

void* print_xs (void* c)
{
	int num= *(int *) c;
	
	if (num >= v_max)
	v_max=num;
	
	
	return NULL;
}
int main ()
{
	pthread_t thread_id1;
	
	long int v[10];
	int i, resultado;
	srand(time(NULL));

	for(i=0; i<10; i++){
	v[i]= rand() % 100;
	printf("Escrevendo os números: %ld\n", v[i]);
	pthread_create (&thread_id1, NULL, &print_xs, (void *)&v[i]);	
	sleep(1);

	}
	

	printf("O valor máximo do vetor é: %d \n", v_max);
	
	//system("pause");

	return 0;
}



--> Comandos para executar programa:

gcc q2.c -o teste2 -lpthread
./teste2


3. Repita o exercício anterior, mas calcule a média do vetor ao invés do valor máximo.


#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


volatile float v_max=0;

void* print_xs (void* c)
{
	int num= *(int *) c;
	
	v_max+=num;
	
	return NULL;
}
int main ()
{
	pthread_t thread_id1;
	
	long int v[50000];
	int i;
	srand(time(NULL));

	for(i=0; i<50000; i++){
	v[i]= rand() % 100;
	printf("Escrevendo os números: %ld\n", v[i]);
	pthread_create (&thread_id1, NULL, &print_xs, (void *)&v[i]);	
	sleep(0.1);

	}
	
	pthread_join(thread_id1,NULL);

	printf("A média dos valores do vetor é: %2f \n", v_max/10);
	
	//system("pause");

	return 0;
}


--> Comandos para executar programa:

gcc q3.c -o teste3 -lpthread
./teste3


4. Repita o exercício anterior, mas calcule a variância do vetor ao invés da média.


-->Código:

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


volatile float med=0;
volatile float var=0;
volatile float var_t=0;
static pthread_mutex_t mutexLock;

void* media (void* c)
{
	int num= *(int *) c;
	
	med+=num;
	
	return NULL;
}

void* variancia (void* c1)
{
	int num1= *(int *) c1;
	float m;
	
	m=(med/5);	
	var=(num1-m)*(num1-m);
	var_t+=var;
	
	return NULL;
}

int main ()
{
	pthread_t thread_id1;
	pthread_t thread_id2;	

	long int v[5];
	int i, res;
	////////////Mutex para sincronizar as Threads:
	res= pthread_mutex_init(&mutexLock,NULL);
	////////////Inicializado vetor aleatório:

	srand(time(NULL));
	for(i=0; i<5; i++){
	v[i]= rand() % 100;}

	////////////Thread para calcular a média:
	for(i=0; i<5;i++){
	printf("Escrevendo os números: %ld\n", v[i]);
	pthread_create (&thread_id1, NULL, &media, (void *)&v[i]);	
	sleep(0.1);

	}
	
	////////////Thread para calcular a variância:	
	printf("\n");
	for(i=0; i<5; i++){
	//printf("Escrevendo os números: %ld\n", v[i]);
	pthread_create (&thread_id2, NULL, &variancia, (void *)&v[i]);	
	sleep(0.1);

	}
	
	////////////Comando para terminar as Threads antes do prorama principal fechar
	pthread_join(thread_id1,NULL);
	pthread_join(thread_id2,NULL);
	pthread_mutex_destroy(&mutexLock);	

	
	///////////Resultados:	
	printf("A média dos valores do vetor é: %2f \n", med/5);
	printf("A variancia dos valores do vetor é: %2f \n",var_t/4);
	
	//system("pause");

	return 0;
}


--> Comandos para executar programa:

gcc q4.c -o teste4 -lpthread
./teste4

