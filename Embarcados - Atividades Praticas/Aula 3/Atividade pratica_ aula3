Universidade de Brasília
Aluno: Douglas da Silveira Alves	Matrícula:130024881
data: 15/03/2017

		Atividade prática _ Aula 3


1. Crie um "Olá mundo!" em C.
-->Código

#include<stdio.h>
#include<stdlib.h>

int main()
{
	printf("Olá mundo\n");
	return 0;

}

-->Comando

nome do arquivo: ola.c
gcc ola.c -o helloword
./helloword


2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Ola Eu
	$

-->Código:

#include<stdio.h>
#include<stdlib.h>

int main()
{
	char nome[100];
	
	printf("Digite seu nome:\n");
	scanf("%s", nome);

	printf("OLA %s \n", nome);

	return 0;

}


-->Comando:

nome do arquivo: q2.c
gcc q2.c -o ola_usuario_1
./ola_usuario_1



3. Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.
$ ./ola_usuario_1 Eu Mesmo

--> O programa reconheceu apenas a string 'Eu'.


(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
$ ./ola_usuario_1 "Eu Mesmo"

--> O programa reconheu a primeira aspas simples e a string 'Eu'.


(c) Se é usado um pipe. Por exemplo:
$ echo Eu | ./ola_usuario_1

--> O programa reconheu a pipe e escreveu a string 'Eu'.


(d) Se é usado um pipe com mais de um nome. Por exemplo:
$ echo Eu Mesmo | ./ola_usuario_1

--> O programa reconheu a pipe e escreveu a string 'Eu'.


(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
$ echo (Eu Mesmo) | ./ola_usuario_1

--> O programa reconheu não reconheceu o comando.


(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_1 < ola.txt

--> O programa reconheceu apenas a string 'Ola'.


4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu
	$ Ola Eu
	$

--> Código:
 
#include<stdio.h>
#include<stdlib.h>


int main (int argc, char *argv[])
{
	int i;
	i=0;
	
	printf("Ola: ");

	printf("%s \n",argv [1]);
		

	return 0;
}


-->Comando:

nome do arquivo: q4.c
gcc q4.c -o ola_usuario_2
./ola_usuario_2


5. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
$ ./ola_usuario_2 Eu Mesmo

-> O programa printa na tela apenas a primeira string 'Eu'.


(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
$ ./ola_usuario_2 "Eu Mesmo"

-> O programa reconhece a expressão, e printa a string entre aspas "Eu mesmo"


(d) Se é usado um pipe com mais de um nome. Por exemplo:
$ echo Eu Mesmo | ./ola_usuario_2

->O programa não reconhece a expressão e printa a mensagem:
 	Ola: (null)


(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
$ echo Eu Mesmo | ./ola_usuario_2

->O programa não reconhece a expressão e printa a mensagem:
 	Ola: (null)


(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_2 < ola.txt


->O programa não reconhece a expressão e printa a mensagem:
 	Ola: (null)



6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
	$ ./ola_usuario_3 Eu
	$ Ola Eu
	$ Numero de entradas = 2
	$

-->Código

#include<stdio.h>
#include<stdlib.h>


int main (int argc, char *argv[])
{
	
	printf("Ola: %s \n",argv [1]);
	printf("Número de entradas: %d \n", argc);
		
	return 0;
}

-->Comando


nome do arquivo: q6.c
gcc q6.c -o ola_usuario_3
./ola_usuario_3 


7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
	$ ./ola_argumentos Eu Mesmo e Minha Pessoa
	$ Argumentos: Eu Mesmo e Minha Pessoa
	$

-->Código

#include<stdio.h>
#include<stdlib.h>


int main (int argc, char *argv[])
{
	int i;
	i=0;
	
	printf("Argumentos: ");

	while ((i< argc) && (argv[i] != '\0') )
	{
		printf("%s ",argv [i+1]);
		
		i++;
	}
	printf("\n");

	return 0;
}


-->Comando


nome do arquivo: q7.c
gcc q7.c -o ola_argumentos
./ola_argumentos



8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:

	int Num_Caracs(char *string);

Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

-->Código:

#include<stdio.h>
#include<stdlib.h>


int num_caracs(char *string)
{
	int i=0;
	
	while (string[i] != '\0')
	{
		i=i+1;
	}
	
	printf("A string possui %d caracteres.\n", i);
		

	return i;
}


-->Protótipo
int num_caracs(char *string);

-->Comando
gcc -c q8.c




9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':
	$ ./ola_num_caracs_1 Eu Mesmo
	$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
	$ Argumento: Eu / Numero de caracteres: 2
	$ Argumento: Mesmo / Numero de caracteres: 5
	$

-->Código principal

#include<stdio.h>
#include "num_caracs.h"

int main (int argc, char *argv[])
{
	int i;
	i=0;
	

		while (i< argc)
	{
		printf("%s ",argv [i]);
		printf("Possui %d caracteres", num_caracs(argv[i]));
		i++;
	}

	printf("\n");

	return 0;
}

--> Código secundário:

#include<stdio.h>
#include "num_caracs.h"

int num_caracs(char *string)
{
	int i=0;
	
	while (string[i] != '\0')
	{
		i=i+1;
	}
	

	return i;
}


--> Função

int num_caracs(char *string);

--> Comandos

gcc -o q9.c

gcc -o ola_num_caracs1 q9.o num_caracs.o

./ola_num_caracs1 ______


10. Crie um Makefile para a questão anterior.

-->Código

ola_num: q9.o num_caracs.o
	gcc $(CFLAGS) -o ola_num q9.o ola_num.o
q9.o: q9.c num_caracs.h
	gcc $(CFLAGS) -c q9.c
num_caracs.o: num_caracs.c num_caracs.h
	g++ $(CFLAGS) -c num_caracs.c
clean:
	rm -f *.o num_caracs


-->Comando 

make
./num_caracs ____


11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':
	$ ./ola_num_caracs_2 Eu Mesmo
	$ Total de caracteres de entrada: 25
	$



--> Código

#include<stdio.h>
#include "num_caracs.h"

int main (int argc, char *argv[])
{
	int i,t;
	i=0;
	t=0;

		while (i< argc)
	{
		
		t+= num_caracs(argv[i]);
		i++;
	}

	printf("Total de caracteres de entrada: %d.\n", t);

	return 0;
}

-->Comando

gcc -o q11.c

gcc -o ola_num_caracs1 q11.o num_caracs.o

./ola_num_caracs2 ______



12. Crie um Makefile para a questão anterior.

--> Código

ola_num: q11.o num_caracs.o
	gcc $(CFLAGS) -o ola_num q11.o ola_num.o
q11.o: q11.c num_caracs.h
	gcc $(CFLAGS) -c q11.c
num_caracs.o: num_caracs.c num_caracs.h
	g++ $(CFLAGS) -c num_caracs.c
clean:
	rm -f *.o num_caracs


-->Comando

make














